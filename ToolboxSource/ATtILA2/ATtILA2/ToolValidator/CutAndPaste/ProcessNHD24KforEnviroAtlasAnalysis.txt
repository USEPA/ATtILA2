import arcpy
import os
import sys
tbxPath = __file__.split("#")[0]
sourceName = "ToolboxSource" 
tbxParentDirPath =  os.path.dirname(tbxPath)
srcDirPath = os.path.join(tbxParentDirPath, sourceName)
sys.path.append(srcDirPath)
import ATtILA2

class ToolValidator(object):
    """Class for validating a tool's parameter values and controlling
    the behavior of the tool's dialog."""

    def __init__(self):
        """Setup arcpy and the list of tool parameters."""
        self.params = arcpy.GetParameterInfo()
        self.menuParameter = self.params[0]
        self.menuInParameters = {'Single':[1], 'Multiple':[2,3]}
        self.initialized = False

    def initializeParameters(self):
        """Refine the properties of a tool's parameters.
        This method is called when the tool is opened."""

    def updateParameters(self):
        """Modify the values and properties of parameters before internal
        validation is performed. This method is called whenever a parameter
        has been changed."""
        menuKey = self.menuParameter.value
            
        for val in list(self.menuInParameters.values()):
          for indx in val:
            if indx in self.menuInParameters[menuKey]:
              self.params[indx].enabled = True
            else:
              self.params[indx].enabled = False

    def updateMessages(self):
        """Modify the messages created by internal validation for each tool
        parameter. This method is called after internal validation."""
        for val in list(self.menuInParameters.values()):
          for indx in val:
            if not self.params[indx].enabled:
              self.params[indx].clearMessage()
              #self.params[indx].value = ''

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True